local a=require("component")local b=require("keyboard").keys;local c=require("unicode")local d=require("tty")local e=require("io")local f={}local g={}g.__index=g;function g:new(h,i,j,k)local self=setmetatable({},g)self.name=h;self.menu=nil;self._x=i;self._y=j;self._text=k;self._isLocked=false;self._bindings={}self._isDirty=true;self._oldTextLength=c.len(k)self._visuals={normal={fg=white,bg=0},selected={fg=0,bg=white},activated={fg=0,bg=0x32CD32},locked={fg=0x333333,bg=0}}return self end;function g:_queueRedraw()self._isDirty=true;if self.menu then self.menu:_requestRedraw(self)end end;function g:x(l)local m=self._x;if l~=nil then self._x=l;self:_queueRedraw()end;return m end;function g:y(n)local o=self._y;if n~=nil then self._y=n;self:_queueRedraw()end;return o end;function g:text(p)local q=self._text;if p~=nil and p~=q then self._oldTextLength=c.len(q)self._text=p;self:_queueRedraw()end;return q end;function g:lock(r)local s=self._isLocked;if r~=nil then self._isLocked=not not r;self:_queueRedraw()end;return s end;function g:bind(t,u)local v=self._bindings[t]if u==false then self._bindings[t]=nil elseif type(u)=="table"then self._bindings[t]=u.name elseif u~=nil then self._bindings[t]=u end;return v end;function g:onSelect(w)local x=self._onSelectCallback;if type(w)=="function"then self._onSelectCallback=w end;return x end;function g:onDeselect(w)local x=self._onDeselectCallback;if type(w)=="function"then self._onDeselectCallback=w end;return x end;function g:onActivate(w)return self:bind(b.enter,w)end;function g:setStyle(y,z,A)if not self._visuals[y]then self._visuals[y]={}end;if z then self._visuals[y].fg=z end;if A then self._visuals[y].bg=A end;self:_queueRedraw()return self end;function g:handleEvent(t)local u=self._bindings[t]if not u then return end;if type(u)=="function"then if self._isLocked and t==b.enter then return"ACTION_BLOCKED"end;return"CALLBACK",u elseif type(u)=="table"and getmetatable(u)==g then return"SELECT_OPTION",u.name elseif type(u)=="string"then return"SELECT_OPTION",u end end;local B={}B.__index=B;function B:new()local self=setmetatable({},B)self._options={}self._selectedOptionName=nil;self._drawQueue={}self._isVisible=true;self._gpu=a.proxy(a.gpu.address)return self end;function B:addOption(h,i,j,k)if self._options[h]then error("Option with name '"..h.."' already exists.",2)end;local C=g:new(h,i,j,k)C.menu=self;self._options[h]=C;self:_requestRedraw(C)if not self._selectedOptionName then self:setSelected(C)end;return C end;function B:removeOption(h)local D=self._options[h]if not D then return nil end;if self._selectedOptionName==h then local E=nil;local F=false;for G,H in pairs(self._options)do if F then E=G;break end;if G==h then F=true end end;if not E then local I=nil;for G,H in pairs(self._options)do if G==h then if I then E=I end;break end;I=G end end;if not E then E=next(self._options)end;if E then self:setSelected(E)else self._selectedOptionName=nil end end;if self._gpu then local J=string.rep(" ",math.max(D._oldTextLength or c.len(D._text),1))self._gpu.set(D._x,D._y,J)end;self._options[h]=nil;for K=1,#self._drawQueue do if self._drawQueue[K]==D then table.remove(self._drawQueue,K)break end end;D.menu=nil;return D end;function B:clearOptions()self._options={}self._selectedOptionName=nil;self._drawQueue={}return self end;function B:getOption(h)return self._options[h]end;function B:setSelected(L)local M;if type(L)=="table"and getmetatable(L)==g then M=L.name elseif type(L)=="string"then M=L end;if not M or not self._options[M]then return false end;if self._selectedOptionName==M then return true end;local N=self._options[self._selectedOptionName]if N then N:_queueRedraw()if N._onDeselectCallback then local O,P=pcall(N._onDeselectCallback,N)if not O and self._onError then self._onError(P)end end end;self._selectedOptionName=M;local C=self._options[M]if C then C:_queueRedraw()if C._onSelectCallback then local O,P=pcall(C._onSelectCallback,C)if not O and self._onError then self._onError(P)end end else return false end;return true end;function B:getSelected()return self._options[self._selectedOptionName]end;function B:_requestRedraw(D)for K=1,#self._drawQueue do if self._drawQueue[K]==D then return end end;table.insert(self._drawQueue,D)return true end;function B:draw(Q)if not self._isVisible then return end;if Q then self._drawQueue={}for R,D in pairs(self._options)do D._isDirty=true;table.insert(self._drawQueue,D)end end;if#self._drawQueue==0 then return end;local S,T=self._gpu.getForeground(),self._gpu.getBackground()for K=1,#self._drawQueue do local D=self._drawQueue[K]local r="normal"if D:lock()then r="locked"elseif D.name==self._selectedOptionName then r="selected"end;local U=D._visuals[r]if U then local V=c.len(D._text)if V<D._oldTextLength then local W=string.rep(" ",D._oldTextLength-V)self._gpu.set(D._x+V,D._y,W)end;self._gpu.setForeground(U.fg)self._gpu.setBackground(U.bg)self._gpu.set(D._x,D._y,D._text)D._oldTextLength=V;D._isDirty=false end end;self._drawQueue={}self._gpu.setForeground(S)self._gpu.setBackground(T)return true end;function B:handleEvent(X)if not self._isVisible or not self._selectedOptionName then return end;local Y=self._options[self._selectedOptionName]if not Y then return end;local Z,_=Y:handleEvent(X)if Z=="CALLBACK"then local O,P=pcall(_,Y)if not O and self._onError then self._onError(P)end elseif Z=="SELECT_OPTION"then self:setSelected(_)end end;function B:read(a0,a1,a2)local i,j,D,a3;if type(a0)=="number"and type(a1)=="number"then i,j,a3=tonumber(a0),tonumber(a1),tonumber(a2)elseif type(a0)=="table"and getmetatable(a0)==g then D=a0;a3=tonumber(a1)or c.len(D:text())i,j=D:x(),D:y()end;if not(i and j)then return end;local a4={d.getViewport()}if not a3 then a3=a4[1]-i end;d.setViewport(a3,1,i-1,j-1)local a5=require("core/cursor")local a6=a5.vertical.clear;a5.vertical.clear="\27[K"e.write("\27[7m\27[2J")local a7=e.read()e.write("\27[0m")a5.vertical.clear=a6;d.setViewport(table.unpack(a4))if D then D:_queueRedraw()end;return a7 end;f.Menu=B;f.Option=g;function f.create()return B:new()end;return f